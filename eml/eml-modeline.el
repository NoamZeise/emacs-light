;;; loads nano-modeline and modifies functionality

(require 'nano-faces)
(require 'nano-modeline)


;; Use lsp headerline in nano modeline
;; ---
;; override nano-modeline function used for header to replace filename
;; with the string generated by lsp-headerline--build-string
(defun nano-modeline-default-mode ()
  (let ((buffer-name (format-mode-line "%b"))
	(mode-name   (nano-mode-name))
	(branch      (vc-branch))
	(crumb (when (bound-and-true-p lsp-mode)
		 (when (functionp 'lsp-headerline--build-string)
		   (replace-regexp-in-string ">" ""
					     (concat
					      (lsp-headerline--build-string) "")))))
	(position (format-mode-line "%l:%c")))
    (nano-modeline-compose (nano-modeline-status)
			   (if crumb crumb buffer-name)
                           (concat "(" mode-name
                                   (if branch (concat ", "
						      (propertize branch 'face 'italic)))
                                   ")" )
			   position)))


;; taken from nano-emacs - nano-theme.el
(defun set-face (face style)
  "Reset FACE and make it inherit STYLE."
  (set-face-attribute face nil
                      :foreground 'unspecified :background 'unspecified
                      :family     'unspecified :slant      'unspecified
                      :weight     'unspecified :height     'unspecified
                      :underline  'unspecified :overline   'unspecified
                      :box        'unspecified :inherit    style))


;; Call when theme changes to fix modeline colours
(defun eml-refresh-modeline-theme ()
  (set-face-attribute 'mode-line nil :height 0.1)
  (set-face-attribute 'mode-line-inactive nil :height 0.1)
  (set-face-attribute 'header-line nil
                      :weight 'light
                      :foreground (face-foreground 'default)
                      :background (face-background 'default)

                      :overline (face-background 'mode-line-inactive)
                      :underline nil
                      :box nil
                      :box `(:line-width 1
                                         :color ,(face-background 'default)
                                         :style nil)
		      :inherit nil)
  ;;match divider with header overline	      
  
  (set-face 'nano-face-header-default 'mode-line-buffer-id)
  (set-face 'nano-face-header-strong 'mode-line-emphasis)
  ;;top left of buffer RW - faded, ** - critical, RO - popout
  (set-face 'nano-face-header-faded 'mode-line-emphasis)
  (set-face 'nano-face-header-critical 'mode-line-buffer-id)
  (set-face 'nano-face-header-popout 'mode-line-highlight)

  (set-face-attribute 'mode-line nil
		      ;; :underline (face-background 'mode-line)
		      :overline nil
		      :box nil)
  (set-face-attribute 'mode-line-inactive nil
		      ;; :underline (face-background 'mode-line)
		      :overline nil
		      :box nil))

 ;; would make modeline at bottom same as bg for hiding it
 ;;(progn (set-face-attribute 'mode-line nil :foreground "#4e4e4e")
;;     (set-face-attribute 'mode-line-inactive nil :foreground "#4e4e4e"))))


(provide 'eml-modeline)
